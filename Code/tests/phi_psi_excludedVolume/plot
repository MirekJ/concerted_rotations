#!/bin/bash

rmachandran(){
	nbinds=$(wc -l $(ls *.dat | tail -n 1))

	for f in $(ls *.dat); do
		len=180
		binWidth=$(bc <<< "scale=8;(2.0 * ${len} ) / 180.0")
gnuplot << EOF

set xlabel '{/Symbol f}'
set ylabel '{/Symbol y}'
set view map

set term pdf enhanced
set output '${f%%dat}pdf'
splot '${f}' u (\$1*${binWidth}-${len}):(\$2*${binWidth}-${len}):3 matrix w image t ''
pause mouse keypress
EOF
    done
}

bh_in_confined_histogram(){
CUTOFF=$1
MASK=$2
DATA=$3

awk -v cutOff=$CUTOFF '
    BEGIN{
	allowed_bins=0; #number of allowed bins to which all entries should be theoreticaly distributed
	entries=0;n     #number of entries in histogram to be equali distributed in allowed_bins
	file=0;         #counter to tell in which file were are in 1-st 2-nd 3-th
    }
    {
	#we use first histogram to produce mask
	#if part of histogram is alowed then mask[x][y]=1 else mask[x][y]=0
	if(FNR==1){file+=1;}
	if (NR==FNR){
	    for(i=0;i<=NF;i++){
		if($i >= cutOff){
		    mask[FNR][i] = 1.0;
		    allowed_bins+=1.0;
		} else {
		    mask[FNR][i] = 0.0;
		}
	    }
	}
	if(file==2){ # count number of entries in DATA file first
	    for(i=0;i<=NF;i++){
		entries+=$i;
	    }
	}
	if(file==3){ #now we have all stuff needed to calculate flattnes of ideal constrained histogram
	    if(FNR==1){#now we calculate mean population of given bin ....
		mean_ocupancy=entries/allowed_bins;
		mean_probability=mean_ocupancy/entries;
	    }
	    for(i=0;i<=NF;i++){
		# now we multiply mean_probabulity by mask ...
		# since in bins which are allowed there should be mean_probability (mask==1)
		# while in bins which are disallowd there should be probability =0 (mean_probability * mask(0) = 0)
		BC_coeficient+=sqrt(($i/entries) * mean_probability * mask[FNR][i]);
	    }
	}
    }
    END{
#	for(i=0;i<=NF;i++){
#	    for(ii=0;ii<=NF;ii++){
#		printf("%i ", mask[i][ii]);
#	    }
#	    printf("\n");
#	}
	print BC_coeficient;
    }' ${MASK} ${DATA} ${DATA}

}

#rmachandran

min=10000;
step=10000;
max=4000000;

sigma=$(ls data_* | head -n 1)
for iter in $(seq $min $step $max); do
    if [ -f "$(printf "${sigma%%_time*}_time_%08i.dat" $iter)" ]; then
        echo "$iter $(bh_in_confined_histogram 5 $(ls data_* | tail -n 1) "$(printf "${sigma%%_time*}_time_%08i.dat" $iter)")" >> BC.dat
    fi
done

gnuplot << EOF

set xlabel 'Iteration in 10^6'
set ylabel 'Bhattacharyya distance'

set term pdf enhanced
set output 'BC.pdf'
plot 'BC.dat' u (\$1*0.000001):2 w lp t ''

EOF




